<?php

/**
 * Implements hook_profiler_builder_defined_libraries().
 *
 * Ensure the following libraries get added to make files generated by the
 * Profiler Builder module.
 */
function distrotest_profiler_builder_defined_libraries() {
  $defined_libs = array();

  // Backbone
  $defined_libs['backbone']['_name'] = t('Backbone');
  $defined_libs['backbone']['download_url'] = "https://codeload.github.com/jashkenas/backbone/zip/1.0.0";

  // Galleria
  $defined_libs['galleria']['_name'] = t('Galleria');
  $defined_libs['galleria']['download_url'] = "http://galleria.io/static/galleria-1.4.2.zip";

  // Galleria Showroom theme
  $defined_libs['showroom']['_name'] = t('Galleria Showroom theme');
  $defined_libs['showroom']['_local'] = TRUE;
  $defined_libs['showroom']['subdir'] = 'galleria/themes';
  $defined_libs['showroom']['directory_name'] = 'showroom';
  $defined_libs['showroom']['type'] = 'library';
  $defined_libs['showroom']['destination'] = 'libraries';
  $defined_libs['showroom']['download_type'] = 'get';
  $defined_libs['showroom']['download_url'] = "https://github.com/BluesparkLabs/showroom/archive/master.zip";

  // Modernizr
  $defined_libs['modernizr']['_name'] = t('Modernizr');
  $defined_libs['modernizr']['download_url'] = "https://codeload.github.com/Modernizr/Modernizr/zip/v2.7.1";

  // Underscore
  $defined_libs['underscore']['_name'] = t('Underscore');
  $defined_libs['underscore']['download_url'] = "https://codeload.github.com/jashkenas/underscore/zip/1.6.0";

  return $defined_libs;
}

/**
 * Implements hook_profiler_builder_defined_libraries_alter().
 *
 * Override the version of CKEditor.
 */
function distrotest_profiler_builder_defined_libraries_alter(&$defined_libs) {
  $defined_libs['ckeditor']['download_url'] = "http://download.cksource.com/CKEditor/CKEditor/CKEditor%204.0.1/ckeditor_4.0.1_standard.zip";
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Allows the profile to alter the site configuration form.
 */
if (!function_exists("system_form_install_configure_form_alter")) {
  function system_form_install_configure_form_alter(&$form, $form_state) {
    $form['site_information']['site_name']['#default_value'] = 'Distro Test';

    // Server settings.
    $form['server_settings']['site_default_country']['#default_value'] = 'US';
  }
}

/**
 * Implements hook_form_alter().
 *
 * Select the current install profile by default.
 */
if (!function_exists("system_form_install_select_profile_form_alter")) {
  function system_form_install_select_profile_form_alter(&$form, $form_state) {
    foreach ($form['profile'] as $key => $element) {
      $form['profile'][$key]['#value'] = 'distrotest';
    }
  }
}

/**
 * Implements hook_install_tasks().
 */
function distrotest_install_tasks(&$install_state) {
  $task = array();

  $task['distrotest_multilingual_support_form'] = array(
    'display_name' => st('Multilingual support'),
    'display' => TRUE,
    'type' => 'form',
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'distrotest_install_task_multilingual_support_form',
  );

  // Determine whether translation import tasks will need to be performed.
  $needs_translations = FALSE;
  $additional_languages = variable_get('distrotest_multilingual_languages', array());

  if (count($install_state['locales']) > 1 && !empty($install_state['parameters']['locale']) && $install_state['parameters']['locale'] != 'en') {
    $needs_translations = TRUE;
  }
  if (count($additional_languages) > 0) {
    $needs_translations = TRUE;
    variable_set('distrotest_import_translation_langcodes', $additional_languages);
  }

  $task['distrotest_import_translation'] = array(
    'display_name' => st('Finish translations'),
    'display' => $needs_translations,
    'run' => $needs_translations ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'type' => 'batch',
  );

  $task['distrotest_content_import'] = array(
    'display_name' => st('Content import'),
    'display' => TRUE,
    'run' => INSTALL_TASK_RUN_IF_NOT_COMPLETED,
    'function' => 'distrotest_install_task_import_content',
  );

  return $task;
}

/**
 * Implement hook_install_tasks_alter().
 *
 * Perform actions to set up the site for this profile.
 */
function distrotest_install_tasks_alter(&$tasks, $install_state) {
  // Remove core steps for translation imports.
  unset($tasks['install_import_locales']);
  unset($tasks['install_import_locales_remaining']);
}

/**
 * Installation step callback.
 */
function distrotest_install_task_import_content(&$install_state) {

  variable_set('site_slogan', 'Placeholder site slogan text');

  $menu_items[] = array(
    'link_path' => 'http://example.com',
    'link_title' => 'Example Footer Link 1',
    'menu_name' => 'menu-footer', // Menu machine name, for example: main-menu
    'weight' => 0,
    'language' => 'en',
    'plid' => 0, // Parent menu item, 0 if menu item is on top level
    'module' => 'menu',
  );
  $menu_items[] = array(
    'link_path' => 'http://example.com',
    'link_title' => 'Example Footer Link 2',
    'menu_name' => 'menu-footer', // Menu machine name, for example: main-menu
    'weight' => 0,
    'language' => 'en',
    'plid' => 0, // Parent menu item, 0 if menu item is on top level
    'module' => 'menu',
  );
  $menu_items[] = array(
    'link_path' => 'http://example.com',
    'link_title' => 'Example Footer Link 3',
    'menu_name' => 'menu-footer', // Menu machine name, for example: main-menu
    'weight' => 0,
    'language' => 'en',
    'plid' => 0, // Parent menu item, 0 if menu item is on top level
    'module' => 'menu',
  );
  foreach($menu_items as $item) {
    menu_link_save($item);
  }

  // Ensure footer and main menus are configured for menu item translation.
  if (module_exists('i18n_menu')) {
    $footer = menu_load('menu-footer');
    $footer['i18n_mode'] = I18N_MODE_TRANSLATE;
    menu_save($footer);

    $main_menu = menu_load('main-menu');
    $main_menu['i18n_mode'] = I18N_MODE_TRANSLATE;
    menu_save($main_menu);
  }
}

/**
 * Installation step callback.
 *
 * @param $form
 *   A Drupal FORM API form.
 * @param $form_state
 *   An array of containing information about the form and the current
 *   installation state.
 *
 * @return The modified Drupal FORM API form, with form elements.
 */
function distrotest_install_task_multilingual_support_form($form, &$form_state) {
  $form['multilingual_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => st('Enable multi-language support'),
    '#description' => st('Selecting this option allows translation of site content and user interface in multiple languages. A language drop-down will be added to the main menu.'),
  );

  $form['available_languages'] = array(
    '#type' => 'fieldset',
    '#title' => st('Available languages to enable'),
    '#description' => st('Select any of the following languages (you may add more later).'),
    '#states' => array(
      'visible' => array(
        '#edit-multilingual-enabled' => array('checked' => TRUE),
      ),
    ),
  );

  // Limit the list of additional languages to those whose .po files are
  // included inside this profile's translations folder.  Additional languages
  // can be added and their translations downloaded after installation.
  $locales = $form_state['build_info']['args'][0]['locales'];

  // The default locale is the one selected on the first screen of the installer.
  // Usually this will be English.  In the list of additional languages to
  // install, the default should be visible but disabled.
  $default_locale = $form_state['build_info']['args'][0]['parameters']['locale'];

  include_once DRUPAL_ROOT . '/includes/iso.inc';
  $languages = _locale_get_predefined_list();

  foreach ($locales as $locale) {
    $name = $locale->langcode;
    if (isset($languages[$name])) {
      $name = $languages[$name][0] . (isset($languages[$name][1]) ? ' ' . st('(@language)', array('@language' => $languages[$name][1])) : '');
    }
    $language_options[$locale->langcode] = $name . ($locale->langcode == 'en' ? ' ' . st('(built-in)') : '');
  }

  $form['available_languages']['select_languages'] = array(
    '#type' => 'checkboxes',
    '#options' => $language_options,
    '#default_value' => array($default_locale),
  );

  $form['available_languages']['select_languages'][$default_locale]['#disabled'] = TRUE;

  // An option to download updates using i18n_update. This option is hidden
  // and disabled by default because it is not needed in normal English install
  // with no additional languages.
  $form['multilingual_update'] = array(
    '#type' => 'checkbox',
    '#title' => st('Update translations from localize.drupal.org'),
    '#default_value' => FALSE,
    '#description' => st('Enabling this option downloads updated translations from <a href="http://localize.drupal.org" target="_blank">localize.drupal.org</a> which may take some time depending on connection speed and number of languages on your site. Turn this option off to import from local .po files only.'),
    // If additional languages are specified, unhide and check the option.
    '#states' => array(
      'visible' => array(
        '#edit-multilingual-enabled' => array('checked' => TRUE),
      ),
      'checked' => array(
        '#edit-multilingual-enabled' => array('checked' => TRUE),
      ),
    ),
  );
  // If default locale is not English unhide and default to checked.
  if ($default_locale != 'en') {
    $form['multilingual_update']['#default_value'] = TRUE;
    unset($form['multilingual_update']['#states']);
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Save and continue'),
    '#weight' => 15,
  );

  return $form;
}

/**
 * Form submit hook for multilingual installation form
 *
 * Store the language choices for later use by hook_install_tasks.
 *
 * @param $form
 * @param $form_state
 */
function distrotest_install_task_multilingual_support_form_submit($form, &$form_state) {

  // Store variables for multilanguage installation.
  // This is used by hook_install_tasks to determine whether translation
  // import tasks will need to be performed.
  variable_set('distrotest_multilingual_support', $form_state['values']['multilingual_enabled']);
  variable_set('distrotest_multilingual_languages', array_filter($form_state['values']['select_languages']));
  variable_set('distrotest_multilingual_update', $form_state['values']['multilingual_update']);
}

/**
 * Installation step callback.
 *
 * @param $install_state
 *   An array of information about the current installation state.
 */
function distrotest_import_translation(&$install_state) {
  // This function handles installation of the additional languages when the
  // default install language is English, as well as when English is NOT the
  // default language used for installation.
  //
  // In the later case, English may even be removed if it is not explicitly
  // enabled by the "Enable multi-language support" option.
  //
  // Additional languages are passed in via a Drupal variable, but if that
  // variable is not set yet, it is because this method is being early in the
  // installation process before the variable table / database has been
  // created and the user is probably installing Drupal in a foreign language.
  $langcodes = variable_get('distrotest_import_translation_langcodes', array());

  if (!empty($install_state['parameters']['locale']) && $install_state['parameters']['locale'] != 'en') {
    // Add foreign language to the list of langcodes when installing in
    // non-English as default language.
    $langcodes = array_merge(drupal_map_assoc(array($install_state['parameters']['locale'])), $langcodes);

    // Cool special case: Drupal enables English by default even when
    // installing in a foreign language. We can detect this case and
    // disable English when it is neither the default language used
    // for installation nor is it selected as an additional language.
    if (!isset($langcodes['en'])) {
      db_update('languages')
        ->fields(array('enabled' => 0))
        ->condition('language', 'en')
        ->execute();
    }
  }

  // Add locales for each language code selected during installation.
  include_once DRUPAL_ROOT . '/includes/locale.inc';
  foreach($langcodes as $locale) {
    if ($locale != 'en') {
      locale_add_language($locale, NULL, NULL, NULL, '', NULL, 1, FALSE);
    }
  }

  // Use a custom batch script to look for local files in all enabled languages.
  // This is used when the "Download updates" option is disabled.
  if (!variable_get('distrotest_multilingual_update', FALSE)) {
    $batch = distrotest_batch_import_local_translations($langcodes, NULL);
    return $batch;
  }

  // When "Download updates" is enabled, first ensure l10n_update module
  // is enabled, note the 7.x-2.x branch is required!
  if (!module_exists('l10n_update')) {
    module_enable(array('l10n_update'));
  }

  // Fetch and batch the translations!
  // These lines are copied directly from l10n_update module.
  module_load_include('fetch.inc', 'l10n_update');
  $options = _l10n_update_default_update_options();
  $last_checked = variable_get('l10n_update_last_check');
  if ($last_checked < REQUEST_TIME - L10N_UPDATE_STATUS_TTL) {
    l10n_update_clear_status();
    $batch = l10n_update_batch_update_build(array(), $langcodes, $options);
  }
  else {
    $batch = l10n_update_batch_fetch_build(array(), $langcodes, $options);
  }
  return $batch;
}

/**
 * Custom batch function loads translation files for all languages.
 *
 * The logic here is roughly based on core's locale_batch_by_language, which
 * unfortunately supports importing one language at a time. This one supports
 * importing multiple languages in one go.
 *
 * @param  Array $langcodes a list of language codes.
 * @param  [type] $finished [description]
 * @param  array  $skip     [description]
 * @return [type]           [description]
 *
 * @see  locale_batch_by_language()
 */
function distrotest_batch_import_local_translations($langcodes, $finished = NULL, $skip = array()) {
  // Collect all files to import for all enabled modules and themes.
  $files = array();
  $components = array();
  $query = db_select('system', 's');
  $query->fields('s', array('name', 'filename'));
  $query->condition('s.status', 1);
  if (count($skip)) {
    $query->condition('name', $skip, 'NOT IN');
  }
  $result = $query->execute();
  foreach ($langcodes as $langcode) {
    foreach ($result as $component) {
      // Collect all files for all components, names as $langcode.po or
      // with names ending with $langcode.po. This allows for filenames
      // like node-module.de.po to let translators use small files and
      // be able to import in smaller chunks.
      $files = array_merge($files, file_scan_directory(dirname($component->filename) . '/translations', '/(^|\.)' . $langcode . '\.po$/', array('recurse' => FALSE)));
      $components[] = $langcode . '_' . $component->name;
    }
  }
  return _locale_batch_build($files, $finished, $components);
}
